/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2016 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32l1xx_hal.h"
#include "adc.h"
#include "rtc.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <inttypes.h>
#include "cbutils.h"
#include "process.h"
#include "define.h"       // Display drivers
#include "glue.h"
#include "load_screens.h"
#include "nodeid.h"
#include "ecog_driver.h"

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
//#define CB_DEMO_0
#define VERSION					3
#define FONT_2 					Arial_Narrow14x20
//#define FONT_2 					Arial_Unicode_MS17x20
#define FONT_3 					Arial_Narrow18x26

#define STATE_TEST				16
#define STATE_INITIAL_TEST		26
#define STATE_NETWORK_PROBLEM	17
#define STATE_SENDING			18
#define STATE_INITIAL 			19
#define STATE_CONNECTING 		20
#define STATE_CONFIG 			21
#define STATE_START 			22
#define STATE_PROBLEM 			23
#define STATE_NOT_GRANT			24
#define STATE_DEMO				25
#define STATE_NORMAL 			0
#define STATE_PRESSED 			2
#define STATE_OVERRIDE 			3

#define SEARCH_OK 				0
#define SEARCH_TIMEOUT 			1
#define SEARCH_ERROR 			2
#define SEND_OK 				0
#define SEND_TIMEOUT 			1
#define BEACON_SEARCH_TIME 		320  // Units: 1/16 second
#define FIRST_ACK_SEARCH_TIME   16   // Units: 1/16 second
#define ACK_SEARCH_TIME         48   // Units: 1/16 secon
#define ONE_DAY 				(24*60*60)
#define T_LONG_PRESS          	2    // Units: 1 second
#define T_DOUBLE_PRESS_16		8    // Units: 1/16 second
#define T_RESET_PRESS         	8    // Units: 1 second
#define T_MAX_RESET_PRESS		60   // To catch failure case

#define MAX_SCREEN 				38
#define REGIONS 2

// Function codes:
#define  f_include_req        	0x00
#define  f_s_include_req      	0x01
#define  f_include_grant      	0x02
#define  f_reinclude          	0x04
#define  f_config             	0x05
#define  f_send_battery       	0x06
#define  f_alert              	0x09
#define  f_woken_up           	0x07
#define  f_ack                	0x08
#define  f_beacon             	0x0A
#define  f_start             	0x0B
#define  f_nack                	0x0C
#define  f_include_not         	0x0D
#define  f_configuring			0x0E
#define	 f_unknown				0x0F

#define PRESS_LEFT_SINGLE	  	0
#define PRESS_RIGHT_SINGLE    	1
#define PRESS_LEFT_LONG		  	2
#define PRESS_RIGHT_LONG      	3
#define PRESS_LEFT_DOUBLE     	4
#define PRESS_RIGHT_DOUBLE    	5
#define PRESS_RESET           	6
#define PRESS_NONE            	7
#define PRESS_DEMO	  		  	8
#define BUTTON_NOT_PRESSED		0
#define BUTTON_PRESSED			1

#define OPERATIONAL			  	0
#define RATE				  	1
#define ROLLING_DEMO		  	2
#define ROLLING_DEMO_PIN	  	100

#define S_S						0
#define S_D						1
#define S_A						2
#define S_LD					3
#define S_LS					4
#define S_MS					5
#define S_MD					6
#define S_RS					7
#define S_RD					8
#define S_XV					9
#define S_XS					10
#define S_W						11
#define S_WS					12

#define MODE				  	OPERATIONAL

uint8_t 			node_id[] 				= {0x00, 0x00, 0x00, 0x00};

char 				debug_buff[128] 		= {0};
char 				screens[MAX_SCREEN][1][194];
uint8_t				states[27][16]     		= {0xFF};

HAL_StatusTypeDef 	status;
int 				length;
uint8_t 			Rx_Buffer[256];
uint8_t 			tx_message[64];
uint8_t 			tx_length;
uint8_t 			bridge_address[2] 		= {0xFF, 0xFF};
uint8_t 			node_address[2] 		= {0x00, 0x00};
uint8_t 			beacon_address[] 		= {0xBB, 0xBB};
uint8_t 			grant_address[] 		= {0xBB, 0x00};

int 				radio_ready   			= SET;
int 				screen_num 				= 0;
GPIO_PinState 		button_state;
int					side					= 0;
uint8_t 			button_irq				= 0;
RTC_HandleTypeDef 	hrtc;
uint8_t 			include_state 			= 0;
uint8_t 			send_attempt 			= 0;
uint8_t 			config_stored 			= 0;
uint8_t 			app_value 				= 0;
uint8_t 			current_screen 			= 0;
uint8_t 			rtc_irq					= 0;
uint16_t 			pressed_button;
uint8_t 			running 				= 0;
uint8_t				current_state			= STATE_INITIAL_TEST;
int32_t				button_press_time[2] 	= {-100, -100};
uint32_t			last_press_sixteenths[2] = {0, 0};
uint8_t				check_long[2]   		= {0, 0};
uint8_t				stop_mode				= 1;
uint8_t				start_from_reset		= 1;
uint8_t				display_initialised		= 0;
int8_t 				temperature;
int8_t 				rssi;
uint8_t				using_side				= BOTH_SIDES;
uint8_t				no_long_check			= 0;

typedef enum {initial, normal, pressed, search, search_failed, reverting, demo} NodeState;
NodeState         node_state           = initial;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void Set_Display(uint8_t screen_num);
HAL_StatusTypeDef Rx_Message(uint8_t *buffer, int *length, uint16_t timeout);
void Radio_On(int delay);
void Host_Ready(void);
void Radio_Off(void);
uint8_t Message_Search(uint8_t *address, uint8_t *Rx_Buffer, int *length, uint16_t max_search_time);
void Send_Message(uint8_t function, uint8_t data_length, uint8_t *data, uint8_t ack, uint8_t beacon);
void Manage_Send(uint8_t ack, uint8_t beacon, uint8_t function);
void Network_Include(void);
void Listen_Radio(uint8_t reset_fail_count, uint8_t no_listen);
void Set_Wakeup(uint8_t force_awake);
void Build_Screen(uint8_t screen_num);
void Store_Config(int length);
static void SYSCLKConfig_STOP(void);
static void SystemPower_Config(void);
void Send_Delay(void);
void Power_Down(void);
void On_RTC_IRQ(void);
void On_Button_IRQ(uint16_t button_pressed, uint16_t GPIO_Pin, GPIO_PinState button_state);
void Initialise_States(void);
void On_NewState(uint8_t enable_send);
int Read_Battery(uint8_t send);
int8_t Get_RSSI(void);
void Configure_And_Test(uint8_t reset);
int8_t Get_Temperature(void);

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */
  uint8_t tx_data[6];
  int i;

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();
  SYSCLKConfig_STOP();
  SystemPower_Config();
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC_Init();
  MX_RTC_Init();
  //MX_SPI1_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
